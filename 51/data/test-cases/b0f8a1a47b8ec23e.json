{"uid":"b0f8a1a47b8ec23e","name":"test_get_pet_invalid_status[empty]","fullName":"tests.test_pet.TestPets#test_get_pet_invalid_status","historyId":"689a33a47d6782501a5af107b974cbc6","time":{"start":1672393629221,"stop":1672393629385,"duration":164},"description":"Parameterization is used here, 5 tests will run.\n        Returns an empty list as there are no pets with that status","descriptionHtml":"<p>Parameterization is used here, 5 tests will run.<br />\nReturns an empty list as there are no pets with that status</p>\n","status":"failed","statusMessage":"AssertionError: assert [{'category':...tring'], ...}] == []\n  Left contains one more item: {'category': {'id': 0, 'name': ''}, 'id': 111111, 'name': '', 'photoUrls': ['string'], ...}\n  Full diff:\n    [\n  -  ,\n  +  {'category': {'id': 0,\n  +                'name': ''},\n  +   'id': 111111,\n  +   'name': '',\n  +   'photoUrls': ['string'],\n  +   'status': '',\n  +   'tags': [{'id': 0,\n  +             'name': 'string'}]},\n    ]","statusTrace":"self = <tests.test_pet.TestPets object at 0x7f7831409de0>, status = ''\n\n    @pytest.mark.parametrize(\n        \"status\",\n        [\n            \"\",\n            \"@\",\n            \"   \",\n            \"beautifully\",\n            pytest.param(\"string\", marks=pytest.mark.xfail(reason=\"status is string\")),\n        ],\n        ids=[\"empty\", \"symbol\", \"whitespace\", \"non-existent status\", \"default\"],\n    )\n    @allure.feature(\"TS_001.03.00 | Pet > {petId}/findByStatus\")\n    @allure.story(\"TC_001.03.02 PET> GET 'Find pets by invalid status'\")\n    def test_get_pet_invalid_status(self, status):\n        \"\"\"Parameterization is used here, 5 tests will run.\n        Returns an empty list as there are no pets with that status\"\"\"\n        status_code, result = pet.get_pet_by_status(params=status)\n        assert status_code == 200\n>       assert result == []\nE       AssertionError: assert [{'category':...tring'], ...}] == []\nE         Left contains one more item: {'category': {'id': 0, 'name': ''}, 'id': 111111, 'name': '', 'photoUrls': ['string'], ...}\nE         Full diff:\nE           [\nE         -  ,\nE         +  {'category': {'id': 0,\nE         +                'name': ''},\nE         +   'id': 111111,\nE         +   'name': '',\nE         +   'photoUrls': ['string'],\nE         +   'status': '',\nE         +   'tags': [{'id': 0,\nE         +             'name': 'string'}]},\nE           ]\n\ntests/test_pet.py:107: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Parameterization is used here, 5 tests will run.\n        Returns an empty list as there are no pets with that status","status":"failed","statusMessage":"AssertionError: assert [{'category':...tring'], ...}] == []\n  Left contains one more item: {'category': {'id': 0, 'name': ''}, 'id': 111111, 'name': '', 'photoUrls': ['string'], ...}\n  Full diff:\n    [\n  -  ,\n  +  {'category': {'id': 0,\n  +                'name': ''},\n  +   'id': 111111,\n  +   'name': '',\n  +   'photoUrls': ['string'],\n  +   'status': '',\n  +   'tags': [{'id': 0,\n  +             'name': 'string'}]},\n    ]","statusTrace":"self = <tests.test_pet.TestPets object at 0x7f7831409de0>, status = ''\n\n    @pytest.mark.parametrize(\n        \"status\",\n        [\n            \"\",\n            \"@\",\n            \"   \",\n            \"beautifully\",\n            pytest.param(\"string\", marks=pytest.mark.xfail(reason=\"status is string\")),\n        ],\n        ids=[\"empty\", \"symbol\", \"whitespace\", \"non-existent status\", \"default\"],\n    )\n    @allure.feature(\"TS_001.03.00 | Pet > {petId}/findByStatus\")\n    @allure.story(\"TC_001.03.02 PET> GET 'Find pets by invalid status'\")\n    def test_get_pet_invalid_status(self, status):\n        \"\"\"Parameterization is used here, 5 tests will run.\n        Returns an empty list as there are no pets with that status\"\"\"\n        status_code, result = pet.get_pet_by_status(params=status)\n        assert status_code == 200\n>       assert result == []\nE       AssertionError: assert [{'category':...tring'], ...}] == []\nE         Left contains one more item: {'category': {'id': 0, 'name': ''}, 'id': 111111, 'name': '', 'photoUrls': ['string'], ...}\nE         Full diff:\nE           [\nE         -  ,\nE         +  {'category': {'id': 0,\nE         +                'name': ''},\nE         +   'id': 111111,\nE         +   'name': '',\nE         +   'photoUrls': ['string'],\nE         +   'status': '',\nE         +   'tags': [{'id': 0,\nE         +             'name': 'string'}]},\nE           ]\n\ntests/test_pet.py:107: AssertionError","steps":[{"name":"GET request from url /v2/pet/findByStatus?status=","time":{"start":1672393629384,"stop":1672393629384,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[{"uid":"4346ae8bd2d81bbc","name":"log","source":"4346ae8bd2d81bbc.txt","type":"text/plain","size":35}],"parameters":[],"stepsCount":1,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"US_001.00.00 | Pet > Everything about your Pets"},{"name":"feature","value":"TS_001.03.00 | Pet > {petId}/findByStatus"},{"name":"story","value":"TC_001.03.02 PET> GET 'Find pets by invalid status'"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_pet"},{"name":"subSuite","value":"TestPets"},{"name":"host","value":"fv-az213-95"},{"name":"thread","value":"2976-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_pet"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"status","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"14934bd92742e964","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/50//#testresult/14934bd92742e964","status":"passed","time":{"start":1672377271327,"stop":1672377271389,"duration":62}}]},"tags":[]},"source":"b0f8a1a47b8ec23e.json","parameterValues":["''"]}