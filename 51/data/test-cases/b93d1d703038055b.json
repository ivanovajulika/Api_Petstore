{"uid":"b93d1d703038055b","name":"test_post_update_pet_invalid_data[invalid_negative_integer-invalid_whitespace]","fullName":"tests.test_pet.TestPets#test_post_update_pet_invalid_data","historyId":"747b9fbf776c792782c773b669da47ef","time":{"start":1672393636816,"stop":1672393637292,"duration":476},"description":"This test used parametrize fixture here, 35 tests will run.\n        Finds a pet by id, if there is a pet with this id, if there is no pet,\n        then creates a pet finds it by id, update this pet by id and\n        checks if the pet's name and status have been updated","descriptionHtml":"<p>This test used parametrize fixture here, 35 tests will run.<br />\nFinds a pet by id, if there is a pet with this id, if there is no pet,<br />\nthen creates a pet finds it by id, update this pet by id and<br />\nchecks if the pet's name and status have been updated</p>\n","status":"failed","statusMessage":"Failed: Status not updated","statusTrace":"self = <tests.test_pet.TestPets object at 0x7f783140ace0>, id = 88\nrandom_name = 'Bffnfwuq', name = '-6'\nheaders = {'Content-Type': 'application/json', 'accept': 'application/json'}\npet_status = '   '\n\n    @pytest.mark.parametrize(\n        \"pet_status\",\n        [\"\", \"@\", \"   \", \"beautifully\"],\n        ids=[\n            \"invalid_empty\",\n            \"invalid_symbol\",\n            \"invalid_whitespace\",\n            \"invalid_non-existent status\",\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"name\",\n        [\"\", \"Анролрa\", \"-6\", \"67 97 \", \"$%^\", max_random_name(1000), \"Doggie\"],\n        ids=[\n            \"invalid_empty\",\n            \"invalid_russian_string\",\n            \"invalid_negative_integer\",\n            \"invalid_whitespace_integer\",\n            \"invalid_simbols\",\n            \"invalid_very_long_name\",\n            \"valid_name\",\n        ],\n    )\n    @allure.feature(\"TS_001.04.00 | Pet > {petId}\")\n    @allure.story(\n        \"TC_001.04.04 | Pet > {petId}> POST 'Updates a pet in the store with invalid data'\"\n    )\n    def test_post_update_pet_invalid_data(\n        self, id, random_name, name, headers, pet_status\n    ):\n        \"\"\"This test used parametrize fixture here, 35 tests will run.\n        Finds a pet by id, if there is a pet with this id, if there is no pet,\n        then creates a pet finds it by id, update this pet by id and\n        checks if the pet's name and status have been updated\"\"\"\n        status, result = pet.get_pet_by_id(id)\n        if status != 200:\n            data = {\"id\": id, \"name\": random_name, \"status\": \"available\"}\n            status, result = pet.post_add_new_pet(data, headers)\n        data = {\"id\": id, \"name\": name, \"status\": pet_status}\n        status, result = pet.post_update_pet(id, data=data)\n        assert status == 200\n        status, result = pet.get_pet_by_id(id)\n        with pytest.raises(AssertionError):\n            assert result[\"name\"] == data[\"name\"]\n            assert result[\"status\"] == data[\"status\"]\n>           pytest.fail(\"Status not updated\")\nE           Failed: Status not updated\n\ntests/test_pet.py:173: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"headers","time":{"start":1672393636816,"stop":1672393636816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"id","time":{"start":1672393636816,"stop":1672393636816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"random_name","time":{"start":1672393636816,"stop":1672393636816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"This test used parametrize fixture here, 35 tests will run.\n        Finds a pet by id, if there is a pet with this id, if there is no pet,\n        then creates a pet finds it by id, update this pet by id and\n        checks if the pet's name and status have been updated","status":"failed","statusMessage":"Failed: Status not updated","statusTrace":"self = <tests.test_pet.TestPets object at 0x7f783140ace0>, id = 88\nrandom_name = 'Bffnfwuq', name = '-6'\nheaders = {'Content-Type': 'application/json', 'accept': 'application/json'}\npet_status = '   '\n\n    @pytest.mark.parametrize(\n        \"pet_status\",\n        [\"\", \"@\", \"   \", \"beautifully\"],\n        ids=[\n            \"invalid_empty\",\n            \"invalid_symbol\",\n            \"invalid_whitespace\",\n            \"invalid_non-existent status\",\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"name\",\n        [\"\", \"Анролрa\", \"-6\", \"67 97 \", \"$%^\", max_random_name(1000), \"Doggie\"],\n        ids=[\n            \"invalid_empty\",\n            \"invalid_russian_string\",\n            \"invalid_negative_integer\",\n            \"invalid_whitespace_integer\",\n            \"invalid_simbols\",\n            \"invalid_very_long_name\",\n            \"valid_name\",\n        ],\n    )\n    @allure.feature(\"TS_001.04.00 | Pet > {petId}\")\n    @allure.story(\n        \"TC_001.04.04 | Pet > {petId}> POST 'Updates a pet in the store with invalid data'\"\n    )\n    def test_post_update_pet_invalid_data(\n        self, id, random_name, name, headers, pet_status\n    ):\n        \"\"\"This test used parametrize fixture here, 35 tests will run.\n        Finds a pet by id, if there is a pet with this id, if there is no pet,\n        then creates a pet finds it by id, update this pet by id and\n        checks if the pet's name and status have been updated\"\"\"\n        status, result = pet.get_pet_by_id(id)\n        if status != 200:\n            data = {\"id\": id, \"name\": random_name, \"status\": \"available\"}\n            status, result = pet.post_add_new_pet(data, headers)\n        data = {\"id\": id, \"name\": name, \"status\": pet_status}\n        status, result = pet.post_update_pet(id, data=data)\n        assert status == 200\n        status, result = pet.get_pet_by_id(id)\n        with pytest.raises(AssertionError):\n            assert result[\"name\"] == data[\"name\"]\n            assert result[\"status\"] == data[\"status\"]\n>           pytest.fail(\"Status not updated\")\nE           Failed: Status not updated\n\ntests/test_pet.py:173: Failed","steps":[{"name":"GET request from url /v2/pet/88","time":{"start":1672393636974,"stop":1672393636974,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"POST request from url /v2/pet/88","time":{"start":1672393637137,"stop":1672393637137,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"GET request from url /v2/pet/88","time":{"start":1672393637292,"stop":1672393637292,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[{"uid":"ba8015ecafd9df53","name":"log","source":"ba8015ecafd9df53.txt","type":"text/plain","size":107}],"parameters":[],"stepsCount":3,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"US_001.00.00 | Pet > Everything about your Pets"},{"name":"feature","value":"TS_001.04.00 | Pet > {petId}"},{"name":"story","value":"TC_001.04.04 | Pet > {petId}> POST 'Updates a pet in the store with invalid data'"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_pet"},{"name":"subSuite","value":"TestPets"},{"name":"host","value":"fv-az213-95"},{"name":"thread","value":"2976-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_pet"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"name","value":"'-6'"},{"name":"pet_status","value":"'   '"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b93d1d703038055b.json","parameterValues":["'-6'","'   '"]}