{"uid":"60ad01d556c446ec","name":"test_put_update_pet_invalid_id[available]","fullName":"tests.test_pet.TestPets#test_put_update_pet_invalid_id","historyId":"6f3a3fee873b0d24a428462dad48a8eb","time":{"start":1673160018383,"stop":1673160018550,"duration":167},"description":"This test used parametrize fixture here, 3 tests will run.\n        Update pet name by invalid id using PUT method,\n        checks that the pet's name has been updated","descriptionHtml":"<p>This test used parametrize fixture here, 3 tests will run.<br />\nUpdate pet name by invalid id using PUT method,<br />\nchecks that the pet's name has been updated</p>\n","status":"skipped","statusMessage":"XFAIL\n\nAssertionError: assert 500 == 400","statusTrace":"self = <tests.test_pet.TestPets object at 0x7fcf78389bd0>\nput_data_invalid_id = {'id': 'string', 'name': 'Xmjkabpy', 'status': 'available'}\nheaders = {'Content-Type': 'application/json', 'accept': 'application/json'}\n\n    @allure.feature(\"TS_001.04.00 | Pet > {petId}\")\n    @allure.story(\n        \"TC_001.02.04 | Pet > {petId}> PUT 'Update an existing pet. Data contains invalid id'\"\n    )\n    @pytest.mark.xfail\n    def test_put_update_pet_invalid_id(self, put_data_invalid_id, headers):\n        \"\"\"This test used parametrize fixture here, 3 tests will run.\n        Update pet name by invalid id using PUT method,\n        checks that the pet's name has been updated\"\"\"\n        status, result = pet.put_update_pet(put_data_invalid_id, headers)\n>       assert status == 400\nE       assert 500 == 400\n\ntests/test_pet.py:247: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"put_data_invalid_id","time":{"start":1673160018383,"stop":1673160018383,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"random_name","time":{"start":1673160018383,"stop":1673160018383,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"headers","time":{"start":1673160018383,"stop":1673160018383,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"This test used parametrize fixture here, 3 tests will run.\n        Update pet name by invalid id using PUT method,\n        checks that the pet's name has been updated","status":"skipped","statusMessage":"XFAIL\n\nAssertionError: assert 500 == 400","statusTrace":"self = <tests.test_pet.TestPets object at 0x7fcf78389bd0>\nput_data_invalid_id = {'id': 'string', 'name': 'Xmjkabpy', 'status': 'available'}\nheaders = {'Content-Type': 'application/json', 'accept': 'application/json'}\n\n    @allure.feature(\"TS_001.04.00 | Pet > {petId}\")\n    @allure.story(\n        \"TC_001.02.04 | Pet > {petId}> PUT 'Update an existing pet. Data contains invalid id'\"\n    )\n    @pytest.mark.xfail\n    def test_put_update_pet_invalid_id(self, put_data_invalid_id, headers):\n        \"\"\"This test used parametrize fixture here, 3 tests will run.\n        Update pet name by invalid id using PUT method,\n        checks that the pet's name has been updated\"\"\"\n        status, result = pet.put_update_pet(put_data_invalid_id, headers)\n>       assert status == 400\nE       assert 500 == 400\n\ntests/test_pet.py:247: AssertionError","steps":[{"name":"PUT request from url /v2/pet","time":{"start":1673160018549,"stop":1673160018550,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[{"uid":"3f7e23ef27c62dce","name":"log","source":"3f7e23ef27c62dce.txt","type":"text/plain","size":36}],"parameters":[],"stepsCount":1,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"US_001.00.00 | Pet > Everything about your Pets"},{"name":"feature","value":"TS_001.04.00 | Pet > {petId}"},{"name":"story","value":"TC_001.02.04 | Pet > {petId}> PUT 'Update an existing pet. Data contains invalid id'"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_pet"},{"name":"subSuite","value":"TestPets"},{"name":"host","value":"fv-az397-891"},{"name":"thread","value":"2732-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_pet"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"put_data_invalid_id","value":"'available'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail"]},"source":"60ad01d556c446ec.json","parameterValues":["'available'"]}