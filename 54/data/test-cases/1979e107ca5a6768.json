{"uid":"1979e107ca5a6768","name":"test_post_new_user_negative[russian_string-string]","fullName":"tests.test_user#test_post_new_user_negative","historyId":"30a69e86cefc53ad19722e57a7238483","time":{"start":1673160115897,"stop":1673160115923,"duration":26},"description":"Creates new user, verifies if the user is created","descriptionHtml":"<p>Creates new user, verifies if the user is created</p>\n","status":"skipped","statusMessage":"XFAIL\n\nAssertionError: assert 500 == 200","statusTrace":"user_id = 'blabla', name = 'Анролрa'\nheaders = {'Content-Type': 'application/json', 'accept': 'application/json'}\n\n    @allure.epic(\"US_003.00.00 | User > Operations about user - negative\")\n    @pytest.mark.xfail\n    @pytest.mark.parametrize(\n        \"user_id\",\n        [\"\", \"blabla\", \"-6\", \"67 97 \", \"$%^\"],\n        ids=[\"empty\", \"string\", \"negative\", \"whitespace\", \"simbols\"],\n    )\n    @pytest.mark.parametrize(\n        \"name\",\n        [\"\", \"Анролрa\", \"-6\", \"67 97 \", \"$%^\", random_name(1000)],\n        ids=[\n            \"empty\",\n            \"russian_string\",\n            \"negative_integer\",\n            \"whitespace_integer\",\n            \"simbols\",\n            \"very_long_name\",\n        ],\n    )\n    def test_post_new_user_negative(user_id, name, headers):\n        \"\"\"Creates new user, verifies if the user is created\"\"\"\n        data = {\"id\": user_id, \"username\": name, \"message\": user_id}\n        status, result = user.post_new_user(data, headers)\n>       assert status == 200\nE       assert 500 == 200\n\ntests/test_user.py:74: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"headers","time":{"start":1673160115896,"stop":1673160115896,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Creates new user, verifies if the user is created","status":"skipped","statusMessage":"XFAIL\n\nAssertionError: assert 500 == 200","statusTrace":"user_id = 'blabla', name = 'Анролрa'\nheaders = {'Content-Type': 'application/json', 'accept': 'application/json'}\n\n    @allure.epic(\"US_003.00.00 | User > Operations about user - negative\")\n    @pytest.mark.xfail\n    @pytest.mark.parametrize(\n        \"user_id\",\n        [\"\", \"blabla\", \"-6\", \"67 97 \", \"$%^\"],\n        ids=[\"empty\", \"string\", \"negative\", \"whitespace\", \"simbols\"],\n    )\n    @pytest.mark.parametrize(\n        \"name\",\n        [\"\", \"Анролрa\", \"-6\", \"67 97 \", \"$%^\", random_name(1000)],\n        ids=[\n            \"empty\",\n            \"russian_string\",\n            \"negative_integer\",\n            \"whitespace_integer\",\n            \"simbols\",\n            \"very_long_name\",\n        ],\n    )\n    def test_post_new_user_negative(user_id, name, headers):\n        \"\"\"Creates new user, verifies if the user is created\"\"\"\n        data = {\"id\": user_id, \"username\": name, \"message\": user_id}\n        status, result = user.post_new_user(data, headers)\n>       assert status == 200\nE       assert 500 == 200\n\ntests/test_user.py:74: AssertionError","steps":[{"name":"POST request from url /v2/user","time":{"start":1673160115922,"stop":1673160115923,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[{"uid":"86e30640b6d30815","name":"log","source":"86e30640b6d30815.txt","type":"text/plain","size":37}],"parameters":[],"stepsCount":1,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"US_003.00.00 | User > Operations about user - negative"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user"},{"name":"host","value":"fv-az154-500"},{"name":"thread","value":"2553-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"name","value":"'Анролрa'"},{"name":"user_id","value":"'blabla'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":7,"passed":0,"unknown":0,"total":7},"items":[{"uid":"e067000b121d163d","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/53//#testresult/e067000b121d163d","status":"skipped","statusDetails":"XFAIL\n\nAssertionError: assert 500 == 200","time":{"start":1673160023894,"stop":1673160024060,"duration":166}},{"uid":"fc79f21d8ff4504d","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/52//#testresult/fc79f21d8ff4504d","status":"skipped","statusDetails":"XFAIL\n\nAssertionError: assert 500 == 200","time":{"start":1672812865889,"stop":1672812866197,"duration":308}},{"uid":"4df1143a3369e080","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/51//#testresult/4df1143a3369e080","status":"skipped","statusDetails":"XFAIL\n\nAssertionError: assert 500 == 200","time":{"start":1672393651357,"stop":1672393651518,"duration":161}},{"uid":"f096576066a3ac0b","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/50//#testresult/f096576066a3ac0b","status":"skipped","statusDetails":"XFAIL\n\nAssertionError: assert 500 == 200","time":{"start":1672377273579,"stop":1672377273616,"duration":37}},{"uid":"8cd752814cbdc652","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/49//#testresult/8cd752814cbdc652","status":"skipped","statusDetails":"XFAIL\n\nAssertionError: assert 500 == 200","time":{"start":1672220930797,"stop":1672220930814,"duration":17}},{"uid":"57ff592c92f82584","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/48//#testresult/57ff592c92f82584","status":"skipped","statusDetails":"XFAIL\n\nAssertionError: assert 500 == 200","time":{"start":1672220401616,"stop":1672220401781,"duration":165}}]},"tags":["@pytest.mark.xfail"]},"source":"1979e107ca5a6768.json","parameterValues":["'Анролрa'","'blabla'"]}