{"uid":"64532d97e87471f3","name":"test_post_new_user_negative[simbols-string]","fullName":"tests.test_user#test_post_new_user_negative","historyId":"4e2d3e273f0fa56d60125f8c66b44eac","time":{"start":1673160116410,"stop":1673160116436,"duration":26},"description":"Creates new user, verifies if the user is created","descriptionHtml":"<p>Creates new user, verifies if the user is created</p>\n","status":"skipped","statusMessage":"XFAIL\n\nAssertionError: assert 500 == 200","statusTrace":"user_id = 'blabla', name = '$%^'\nheaders = {'Content-Type': 'application/json', 'accept': 'application/json'}\n\n    @allure.epic(\"US_003.00.00 | User > Operations about user - negative\")\n    @pytest.mark.xfail\n    @pytest.mark.parametrize(\n        \"user_id\",\n        [\"\", \"blabla\", \"-6\", \"67 97 \", \"$%^\"],\n        ids=[\"empty\", \"string\", \"negative\", \"whitespace\", \"simbols\"],\n    )\n    @pytest.mark.parametrize(\n        \"name\",\n        [\"\", \"Анролрa\", \"-6\", \"67 97 \", \"$%^\", random_name(1000)],\n        ids=[\n            \"empty\",\n            \"russian_string\",\n            \"negative_integer\",\n            \"whitespace_integer\",\n            \"simbols\",\n            \"very_long_name\",\n        ],\n    )\n    def test_post_new_user_negative(user_id, name, headers):\n        \"\"\"Creates new user, verifies if the user is created\"\"\"\n        data = {\"id\": user_id, \"username\": name, \"message\": user_id}\n        status, result = user.post_new_user(data, headers)\n>       assert status == 200\nE       assert 500 == 200\n\ntests/test_user.py:74: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"headers","time":{"start":1673160116410,"stop":1673160116410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Creates new user, verifies if the user is created","status":"skipped","statusMessage":"XFAIL\n\nAssertionError: assert 500 == 200","statusTrace":"user_id = 'blabla', name = '$%^'\nheaders = {'Content-Type': 'application/json', 'accept': 'application/json'}\n\n    @allure.epic(\"US_003.00.00 | User > Operations about user - negative\")\n    @pytest.mark.xfail\n    @pytest.mark.parametrize(\n        \"user_id\",\n        [\"\", \"blabla\", \"-6\", \"67 97 \", \"$%^\"],\n        ids=[\"empty\", \"string\", \"negative\", \"whitespace\", \"simbols\"],\n    )\n    @pytest.mark.parametrize(\n        \"name\",\n        [\"\", \"Анролрa\", \"-6\", \"67 97 \", \"$%^\", random_name(1000)],\n        ids=[\n            \"empty\",\n            \"russian_string\",\n            \"negative_integer\",\n            \"whitespace_integer\",\n            \"simbols\",\n            \"very_long_name\",\n        ],\n    )\n    def test_post_new_user_negative(user_id, name, headers):\n        \"\"\"Creates new user, verifies if the user is created\"\"\"\n        data = {\"id\": user_id, \"username\": name, \"message\": user_id}\n        status, result = user.post_new_user(data, headers)\n>       assert status == 200\nE       assert 500 == 200\n\ntests/test_user.py:74: AssertionError","steps":[{"name":"POST request from url /v2/user","time":{"start":1673160116436,"stop":1673160116436,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[{"uid":"9807e95f17003da1","name":"log","source":"9807e95f17003da1.txt","type":"text/plain","size":37}],"parameters":[],"stepsCount":1,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"US_003.00.00 | User > Operations about user - negative"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user"},{"name":"host","value":"fv-az154-500"},{"name":"thread","value":"2553-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"name","value":"'$%^'"},{"name":"user_id","value":"'blabla'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":7,"passed":0,"unknown":0,"total":7},"items":[{"uid":"c650d8efeef3e01f","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/53//#testresult/c650d8efeef3e01f","status":"skipped","statusDetails":"XFAIL\n\nAssertionError: assert 500 == 200","time":{"start":1673160026499,"stop":1673160026665,"duration":166}},{"uid":"a699251eda01c967","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/52//#testresult/a699251eda01c967","status":"skipped","statusDetails":"XFAIL\n\nAssertionError: assert 500 == 200","time":{"start":1672812870488,"stop":1672812870791,"duration":303}},{"uid":"be445ced103d6383","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/51//#testresult/be445ced103d6383","status":"skipped","statusDetails":"XFAIL\n\nAssertionError: assert 500 == 200","time":{"start":1672393653888,"stop":1672393654046,"duration":158}},{"uid":"73ada9c10f8976f3","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/50//#testresult/73ada9c10f8976f3","status":"skipped","statusDetails":"XFAIL\n\nAssertionError: assert 500 == 200","time":{"start":1672377274387,"stop":1672377274423,"duration":36}},{"uid":"b9187712cce8a604","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/49//#testresult/b9187712cce8a604","status":"skipped","statusDetails":"XFAIL\n\nAssertionError: assert 500 == 200","time":{"start":1672220931180,"stop":1672220931198,"duration":18}},{"uid":"8a95a37b336791dc","reportUrl":"https://ivanovajulika.github.io/Api_Petstore/48//#testresult/8a95a37b336791dc","status":"skipped","statusDetails":"XFAIL\n\nAssertionError: assert 500 == 200","time":{"start":1672220404298,"stop":1672220404454,"duration":156}}]},"tags":["@pytest.mark.xfail"]},"source":"64532d97e87471f3.json","parameterValues":["'$%^'","'blabla'"]}